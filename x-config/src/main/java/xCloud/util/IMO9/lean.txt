import Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan

open Real

-- Theorem for IMO 1990 Shortlist Problem C3
theorem imo_1990_shl_c3 (x y z : ℝ)
  (hcond : x + y + z = x * y * z) -- Condition: x + y + z = xyz
  (hx : |x| ≠ 1 / sqrt 3) (hy : |y| ≠ 1 / sqrt 3) (hz : |z| ≠ 1 / sqrt 3) : -- |x|, |y|, |z| ≠ 1/√3
  let f := fun t => (3 * t - t ^ 3) / (1 - 3 * t ^ 2); -- Define f(t) = (3t - t^3)/(1 - 3t^2)
  f x + f y + f z = f x * f y * f z := by
  -- Define the function f
  set f := fun t => (3 * t - t ^ 3) / (1 - 3 * t ^ 2)
  -- Use trigonometric substitution: x = tan A, y = tan B, z = tan C
  obtain ⟨A, hA⟩ : ∃ A, x = tan A := ⟨arctan x, arctan_tan x⟩
  obtain ⟨B, hB⟩ : ∃ B, y = tan B := ⟨arctan y, arctan_tan y⟩
  obtain ⟨C, hC⟩ : ∃ C, z = tan C := ⟨arctan z, arctan_tan z⟩
  -- Substitute into the condition x + y + z = xyz
  have h_tan : tan A + tan B + tan C = tan A * tan B * tan C := by
    rw [hA, hB, hC] at hcond
    exact hcond
  -- Show A + B + C = nπ using the tangent addition formula
  have h_angle : ∃ n : ℤ, A + B + C = n * π := by
    let s := tan A + tan B + tan C
    have : s = tan A * tan B * tan C := h_tan
    have : tan (A + B + C) = (tan A + tan B + tan C - tan A * tan B * tan C) /
      (1 - (tan A * tan B + tan B * tan C + tan C * tan A)) := tan_add_add (by {
        intro h
        have : tan A * tan B * tan C = 1 - (tan A * tan B + tan B * tan C + tan C * tan A) := by
          rw [← tan_add_add, h, tan_zero]
        linarith [h_tan]
      })
    rw [this, h_tan]
    simp only [sub_self, zero_div]
    exact tan_eq_zero_iff.mp
  -- Compute f(tan θ) = tan 3θ
  have h_f_tan : ∀ θ, (1 - 3 * (tan θ) ^ 2 ≠ 0) → f (tan θ) = tan (3 * θ) := by
    intro θ h_den
    have h_den' : 1 - 3 * tan θ ^ 2 ≠ 0 := h_den
    unfold f
    rw [← tan_three_mul]
    field_simp [h_den']
    ring
  -- Apply the condition |x| ≠ 1/√3 to ensure denominators are non-zero
  have h_den_x : 1 - 3 * x ^ 2 ≠ 0 := by
    intro h
    have : 3 * x ^ 2 = 1 := by linarith
    have : x ^ 2 = 1 / 3 := by linarith
    have : |x| = 1 / sqrt 3 := by
      rw [abs_eq_sqrt_sq x]
      exact sqrt_div_of_nonneg (by norm_num) (by norm_num)
    contradiction
  have h_den_y : 1 - 3 * y ^ 2 ≠ 0 := by
    intro h
    have : 3 * y ^ 2 = 1 := by linarith
    have : y ^ 2 = 1 / 3 := by linarith
    have : |y| = 1 / sqrt 3 := by
      rw [abs_eq_sqrt_sq y]
      exact sqrt_div_of_nonneg (by norm_num) (by norm_num)
    contradiction
  have h_den_z : 1 - 3 * z ^ 2 ≠ 0 := by
    intro h
    have : 3 * z ^ 2 = 1 := by linarith
    have : z ^ 2 = 1 / 3 := by linarith
    have : |z| = 1 / sqrt 3 := by
      rw [abs_eq_sqrt_sq z]
      exact sqrt_div_of_nonneg (by norm_num) (by norm_num)
    contradiction
  -- Evaluate f(x), f(y), f(z)
  have h_fx : f x = tan (3 * A) := by
    rw [hA]
    exact h_f_tan A h_den_x
  have h_fy : f y = tan (3 * B) := by
    rw [hB]
    exact h_f_tan B h_den_y
  have h_fz : f z = tan (3 * C) := by
    rw [hC]
    exact h_f_tan C h_den_z
  -- Left-hand side
  have h_left : f x + f y + f z = tan (3 * A) + tan (3 * B) + tan (3 * C) := by
    rw [h_fx, h_fy, h_fz]
  -- Right-hand side
  have h_right : f x * f y * f z = tan (3 * A) * tan (3 * B) * tan (3 * C) := by
    rw [h_fx, h_fy, h_fz]
  -- Use A + B + C = nπ
  obtain ⟨n, h_abc⟩ : ∃ n : ℤ, A + B + C = n * π := h_angle
  have : 3 * A + 3 * B + 3 * C = 3 * n * π := by
    rw [h_abc]
    ring
  have h_tan_sum : tan (3 * A + 3 * B + 3 * C) = 0 := by
    rw [this]
    exact tan_int_mul_pi 3 n
  -- Apply the tangent addition formula for three angles
  have h_tan_eq : tan (3 * A + 3 * B + 3 * C) = (tan (3 * A) + tan (3 * B) + tan (3 * C) - tan (3 * A) * tan (3 * B) * tan (3 * C)) /
    (1 - (tan (3 * A) * tan (3 * B) + tan (3 * B) * tan (3 * C) + tan (3 * C) * tan (3 * A))) := tan_add_add (by {
      intro h
      have : tan (3 * A) * tan (3 * B) * tan (3 * C) = 1 - (tan (3 * A) * tan (3 * B) + tan (3 * B) * tan (3 * C) + tan (3 * C) * tan (3 * A)) := by
        rw [← tan_add_add, h, tan_zero]
      linarith
    })
  -- Since tan (3A + 3B + 3C) = 0, the numerator is zero
  have : tan (3 * A) + tan (3 * B) + tan (3 * C) = tan (3 * A) * tan (3 * B) * tan (3 * C) := by
    rw [h_tan_eq] at h_tan_sum
    exact eq_of_sub_eq_zero h_tan_sum
  -- Conclude the proof
  rw [h_left, h_right, this]