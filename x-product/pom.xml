<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>xCloud</groupId>
        <artifactId>cloud-def</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>x-product</artifactId>
    <name>x-product</name>
    <description>x-product</description>
    <packaging>jar</packaging>
    <version>0.0.1-SNAPSHOT</version>

    <dependencies>

        <!--项目公共依赖-->
        <dependency>
            <groupId>xCloud</groupId>
            <artifactId>x-config</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

        <!-- 10.langchain4j
         LangChain4j 是专为 Java 生态设计的开源框架，兼容 Spring Boot。它简化了大型语言模型（LLM）在 Java 应用中的集成，提供了统一的 API、自动配置和与 Spring 生态的无缝衔接 -->
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-open-ai-spring-boot-starter</artifactId>
            <version>1.0.0-beta3</version>
        </dependency>
        <!--10.2 Spring Boot starter for declarative AI Services
        LangChain4j provides a Spring Boot starter for auto-configuring AI Services, RAG, Tools etc.
        Assuming you have already imported one of the integrations starters (see above), import langchain4j-spring-boot-starter:
        You can now define AI Service interface and annotate it with @AiService:
        声明式AI服务的Spring Boot启动器
        LangChain4j提供了一个Spring Boot启动器，用于自动配置AI服务、RAG、工具等。
        假设您已经导入了一个集成启动器（见上文），请导入langchain4j spring boot starter：
        -->
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-spring-boot-starter</artifactId>
            <version>1.0.0-beta3</version>
        </dependency>

        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- Elasticsearch -->
        <!-- Spring Data Elasticsearch (可选，推荐用于Repository模式) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
        </dependency>

        <!-- Elasticsearch Java API Client (必须) -->
        <dependency>
            <groupId>co.elastic.clients</groupId>
            <artifactId>elasticsearch-java</artifactId>
            <version>8.14.3</version> <!-- 必须与服务端版本一致 -->
        </dependency>

        <!--        [INFO] +- org.springframework.boot:spring-boot-starter-data-elasticsearch:jar:3.4.3:compile
        [INFO] |  \- org.springframework.data:spring-data-elasticsearch:jar:5.4.2:compile
        [INFO] |     \- org.springframework.data:spring-data-commons:jar:3.4.2:compile
        [INFO] +- co.elastic.clients:elasticsearch-java:jar:8.12.0:compile
        [INFO] |  +- org.elasticsearch.client:elasticsearch-rest-client:jar:8.15.5:compile
        -->

        <!-- Seata Starter（兼容 Spring Boot 3.x） -->
        <dependency>
            <groupId>io.seata</groupId>
            <artifactId>seata-spring-boot-starter</artifactId>
            <version>1.8.0</version>
        </dependency>


        <!-- Spring Boot Starter for Kafka -->
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
            <!--                <version>2.8.0</version>  &lt;!&ndash; 使用最新版本,可以不用指定，默认就有 &ndash;&gt;-->
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
